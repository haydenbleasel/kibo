{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/code-block",
  "name": "code-block",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "@icons-pack/react-simple-icons",
    "lucide-react",
    "shiki"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport {\n  type IconType,\n  SiAstro,\n  SiBiome,\n  SiBower,\n  SiBun,\n  SiC,\n  SiCircleci,\n  SiCoffeescript,\n  SiCplusplus,\n  SiCss,\n  SiCssmodules,\n  SiDart,\n  SiDocker,\n  SiDocusaurus,\n  SiDotenv,\n  SiEditorconfig,\n  SiEslint,\n  SiGatsby,\n  SiGitignoredotio,\n  SiGnubash,\n  SiGo,\n  SiGraphql,\n  SiGrunt,\n  SiGulp,\n  SiHandlebarsdotjs,\n  SiHtml5,\n  SiJavascript,\n  SiJest,\n  SiJson,\n  SiLess,\n  SiMarkdown,\n  SiMdx,\n  SiMintlify,\n  SiMocha,\n  SiMysql,\n  SiNextdotjs,\n  SiPerl,\n  SiPhp,\n  SiPostcss,\n  SiPrettier,\n  SiPrisma,\n  SiPug,\n  SiPython,\n  SiR,\n  SiReact,\n  SiReadme,\n  SiRedis,\n  SiRemix,\n  SiRive,\n  SiRollupdotjs,\n  SiRuby,\n  SiSanity,\n  SiSass,\n  SiScala,\n  SiSentry,\n  SiShadcnui,\n  SiStorybook,\n  SiStylelint,\n  SiSublimetext,\n  SiSvelte,\n  SiSvg,\n  SiSwift,\n  SiTailwindcss,\n  SiToml,\n  SiTypescript,\n  SiVercel,\n  SiVite,\n  SiVuedotjs,\n  SiWebassembly,\n} from '@icons-pack/react-simple-icons';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport type { ComponentProps, ReactElement, ReactNode } from 'react';\nimport { cloneElement, useEffect, useState } from 'react';\nimport { type CodeOptionsMultipleThemes, codeToHtml } from 'shiki';\n\nconst filenameIconMap = {\n  '.env': SiDotenv,\n  '*.astro': SiAstro,\n  'biome.json': SiBiome,\n  '.bowerrc': SiBower,\n  'bun.lockb': SiBun,\n  '*.c': SiC,\n  '*.cpp': SiCplusplus,\n  '.circleci/config.yml': SiCircleci,\n  '*.coffee': SiCoffeescript,\n  '*.module.css': SiCssmodules,\n  '*.css': SiCss,\n  '*.dart': SiDart,\n  Dockerfile: SiDocker,\n  'docusaurus.config.js': SiDocusaurus,\n  '.editorconfig': SiEditorconfig,\n  '.eslintrc': SiEslint,\n  'eslint.config.*': SiEslint,\n  'gatsby-config.*': SiGatsby,\n  '.gitignore': SiGitignoredotio,\n  '*.go': SiGo,\n  '*.graphql': SiGraphql,\n  '*.sh': SiGnubash,\n  'Gruntfile.*': SiGrunt,\n  'gulpfile.*': SiGulp,\n  '*.hbs': SiHandlebarsdotjs,\n  '*.html': SiHtml5,\n  '*.js': SiJavascript,\n  '*.json': SiJson,\n  '*.test.js': SiJest,\n  '*.less': SiLess,\n  '*.md': SiMarkdown,\n  '*.mdx': SiMdx,\n  'mintlify.json': SiMintlify,\n  'mocha.opts': SiMocha,\n  '*.mustache': SiHandlebarsdotjs,\n  '*.sql': SiMysql,\n  'next.config.*': SiNextdotjs,\n  '*.pl': SiPerl,\n  '*.php': SiPhp,\n  'postcss.config.*': SiPostcss,\n  'prettier.config.*': SiPrettier,\n  '*.prisma': SiPrisma,\n  '*.pug': SiPug,\n  '*.py': SiPython,\n  '*.r': SiR,\n  '*.rb': SiRuby,\n  '*.jsx': SiReact,\n  '*.tsx': SiReact,\n  'readme.md': SiReadme,\n  '*.rdb': SiRedis,\n  'remix.config.*': SiRemix,\n  '*.riv': SiRive,\n  'rollup.config.*': SiRollupdotjs,\n  'sanity.config.*': SiSanity,\n  '*.sass': SiSass,\n  '*.scss': SiSass,\n  '*.sc': SiScala,\n  '*.scala': SiScala,\n  'sentry.client.config.*': SiSentry,\n  'components.json': SiShadcnui,\n  'storybook.config.*': SiStorybook,\n  'stylelint.config.*': SiStylelint,\n  '.sublime-settings': SiSublimetext,\n  '*.svelte': SiSvelte,\n  '*.svg': SiSvg,\n  '*.swift': SiSwift,\n  'tailwind.config.*': SiTailwindcss,\n  '*.toml': SiToml,\n  '*.ts': SiTypescript,\n  'vercel.json': SiVercel,\n  'vite.config.*': SiVite,\n  '*.vue': SiVuedotjs,\n  '*.wasm': SiWebassembly,\n};\n\nexport type CodeBlockProps = {\n  children: ReactNode;\n};\n\nexport const CodeBlock = ({ children }: CodeBlockProps) => (\n  <div className=\"overflow-hidden rounded-md border\">{children}</div>\n);\n\nexport type CodeBlockHeaderProps = {\n  children: ReactNode;\n  filename: string;\n  icon?: IconType;\n};\n\nexport const CodeBlockHeader = ({\n  children,\n  filename,\n  icon,\n}: CodeBlockHeaderProps) => {\n  const defaultIcon = Object.entries(filenameIconMap).find(([pattern]) => {\n    const regex = new RegExp(\n      `^${pattern.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*')}$`\n    );\n    return regex.test(filename);\n  })?.[1];\n  const Icon = icon ?? defaultIcon;\n\n  return (\n    <div className=\"group flex items-center gap-2 bg-secondary px-4 py-1.5 text-muted-foreground text-xs\">\n      {Icon && <Icon className=\"h-4 w-4 shrink-0\" />}\n      <span className=\"flex-1 truncate\">{filename}</span>\n      {children}\n    </div>\n  );\n};\n\nexport type CodeBlockCopyButtonProps = ComponentProps<typeof Button> & {\n  value: string;\n  onCopy?: () => void;\n  onError?: (error: Error) => void;\n  timeout?: number;\n};\n\nexport const CodeBlockCopyButton = ({\n  asChild,\n  value,\n  onCopy,\n  onError,\n  timeout = 2000,\n  children,\n  ...props\n}: CodeBlockCopyButtonProps) => {\n  const [isCopied, setIsCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    if (\n      typeof window === 'undefined' ||\n      !navigator.clipboard.writeText ||\n      !value\n    ) {\n      return;\n    }\n\n    navigator.clipboard.writeText(value).then(() => {\n      setIsCopied(true);\n      onCopy?.();\n\n      setTimeout(() => setIsCopied(false), timeout);\n    }, onError);\n  };\n\n  if (asChild) {\n    return cloneElement(children as ReactElement, {\n      // @ts-expect-error - we know this is a button\n      onClick: copyToClipboard,\n    });\n  }\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={copyToClipboard}\n      className=\"-mr-1 shrink-0 opacity-0 transition-opacity group-hover:opacity-100\"\n      {...props}\n    >\n      {children ?? <Icon size={14} className=\"text-muted-foreground\" />}\n    </Button>\n  );\n};\n\nexport type CodeBlockBodyProps = {\n  children: ReactNode;\n  themes?: CodeOptionsMultipleThemes['themes'];\n};\n\nexport const CodeBlockBody = ({ children, themes }: CodeBlockBodyProps) => {\n  const [html, setHtml] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchHtml = async () => {\n      const html = await codeToHtml(children as string, {\n        lang: 'javascript',\n        themes: themes ?? {\n          light: 'vitesse-light',\n          dark: 'vitesse-dark',\n        },\n      });\n      setHtml(html);\n    };\n    fetchHtml();\n  }, [children, themes]);\n\n  if (!html) {\n    return <pre className=\"p-4\">{html}</pre>;\n  }\n\n  return (\n    <div\n      className={cn(\n        'p-4 text-sm',\n        '[&_code]:[counter-reset:line]',\n        '[&_code]:[counter-increment:line_0]',\n        '[&_.line]:before:content-[counter(line)]',\n        '[&_.line]:before:inline-block',\n        '[&_.line]:before:[counter-increment:line]',\n        '[&_.line]:before:w-4',\n        '[&_.line]:before:mr-4',\n        '[&_.line]:before:text-[13px]',\n        '[&_.line]:before:text-right',\n        '[&_.line]:before:text-muted-foreground/50',\n        '[&_.line]:before:font-mono',\n        '[&_.line]:before:select-none'\n      )}\n      // biome-ignore lint/security/noDangerouslySetInnerHtml: \"Kinda how Shiki works\"\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n};\n",
      "target": "components/ui/kibo-ui/code-block.tsx"
    }
  ]
}