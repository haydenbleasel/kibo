{
  "name": "dropzone",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "react-dropzone"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "index.tsx",
      "content": "import { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { UploadIcon } from 'lucide-react';\nimport type { ReactNode } from 'react';\nimport { createContext, useContext } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport type {\n  Accept,\n  DropEvent,\n  DropzoneOptions,\n  FileRejection,\n} from 'react-dropzone';\n\ntype DropzoneContextType = {\n  src?: File[];\n  accept?: Accept;\n  maxSize?: number;\n  minSize?: number;\n};\n\nconst renderBytes = (bytes: number) => {\n  const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(2)}${units[unitIndex]}`;\n};\n\nconst DropzoneContext = createContext<DropzoneContextType | undefined>(\n  undefined\n);\n\nexport type DropzoneProps = Omit<DropzoneOptions, 'onDrop'> & {\n  src?: File[];\n  className?: string;\n  onDrop?: (\n    acceptedFiles: File[],\n    fileRejections: FileRejection[],\n    event: DropEvent\n  ) => void;\n  children?: ReactNode;\n};\n\nexport const Dropzone = ({\n  accept,\n  maxFiles = 1,\n  maxSize,\n  minSize,\n  onDrop,\n  onError,\n  disabled,\n  src,\n  className,\n  children,\n  ...props\n}: DropzoneProps) => {\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept,\n    maxFiles,\n    maxSize,\n    minSize,\n    onError,\n    disabled,\n    onDrop: (acceptedFiles, fileRejections, event) => {\n      if (fileRejections.length > 0) {\n        const message = fileRejections.at(0)?.errors.at(0)?.message;\n        onError?.(new Error(message));\n        return;\n      }\n\n      onDrop?.(acceptedFiles, fileRejections, event);\n    },\n    ...props,\n  });\n\n  return (\n    <DropzoneContext.Provider\n      key={JSON.stringify(src)}\n      value={{ src, accept, maxSize, minSize }}\n    >\n      <Button\n        type=\"button\"\n        disabled={disabled}\n        variant=\"outline\"\n        className={cn(\n          'h-auto w-full flex-col p-8',\n          isDragActive && 'outline-none ring-1 ring-ring',\n          className\n        )}\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} disabled={disabled} />\n        {children}\n      </Button>\n    </DropzoneContext.Provider>\n  );\n};\n\nconst useDropzoneContext = () => {\n  const context = useContext(DropzoneContext);\n\n  if (!context) {\n    throw new Error('useDropzoneContext must be used within a Dropzone');\n  }\n\n  return context;\n};\n\nexport type DropzoneContentProps = {\n  children?: ReactNode;\n};\n\nexport const DropzoneContent = ({ children }: DropzoneContentProps) => {\n  const { src } = useDropzoneContext();\n\n  if (!src) {\n    return null;\n  }\n\n  if (children) {\n    return children;\n  }\n\n  return (\n    <>\n      <div className=\"flex size-8 items-center justify-center rounded-full bg-muted text-muted-foreground\">\n        <UploadIcon size={16} />\n      </div>\n      <p className=\"my-2 truncate font-medium text-sm\">\n        {new Intl.ListFormat('en').format(src.map((file) => file.name))}\n      </p>\n      <p className=\"text-muted-foreground text-xs\">\n        Drag and drop or click to replace\n      </p>\n    </>\n  );\n};\n\nexport type DropzoneEmptyStateProps = {\n  children?: ReactNode;\n};\n\nexport const DropzoneEmptyState = ({ children }: DropzoneEmptyStateProps) => {\n  const { src, accept, maxSize, minSize } = useDropzoneContext();\n\n  if (src) {\n    return null;\n  }\n\n  if (children) {\n    return children;\n  }\n\n  let caption = '';\n\n  if (accept) {\n    caption += 'Accepts ';\n    caption += new Intl.ListFormat('en').format(Object.keys(accept));\n  }\n\n  if (minSize && maxSize) {\n    caption += ` between ${renderBytes(minSize)} and ${renderBytes(maxSize)}`;\n  } else if (minSize) {\n    caption += ` at least ${renderBytes(minSize)}`;\n  } else if (maxSize) {\n    caption += ` less than ${renderBytes(maxSize)}`;\n  }\n\n  caption += '.';\n\n  return (\n    <>\n      <div className=\"flex size-8 items-center justify-center rounded-full bg-muted text-muted-foreground\">\n        <UploadIcon size={16} />\n      </div>\n      <p className=\"my-2 font-medium text-sm\">Upload a file</p>\n      <p className=\"text-muted-foreground text-xs\">\n        Drag and drop or click to upload\n      </p>\n      {caption && <p className=\"text-muted-foreground text-xs\">{caption}</p>}\n    </>\n  );\n};\n",
      "target": "ui/index.tsx"
    }
  ]
}