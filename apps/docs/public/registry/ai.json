{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/ai",
  "name": "ai",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "button",
    "select",
    "textarea"
  ],
  "dependencies": [
    "@repo/code-block",
    "lucide-react",
    "motion",
    "react-markdown",
    "remark-gfm"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "response.tsx",
      "content": "'use client';\n\nimport { cn } from '@/lib/utils';\nimport {\n  type BundledLanguage,\n  CodeBlock,\n  CodeBlockBody,\n  CodeBlockContent,\n  CodeBlockCopyButton,\n  CodeBlockFilename,\n  CodeBlockFiles,\n  CodeBlockHeader,\n  CodeBlockItem,\n  type CodeBlockProps,\n  CodeBlockSelect,\n  CodeBlockSelectContent,\n  CodeBlockSelectItem,\n  CodeBlockSelectTrigger,\n  CodeBlockSelectValue,\n} from '@repo/code-block';\nimport type { HTMLAttributes } from 'react';\nimport ReactMarkdown, { type Options } from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\nexport type AIResponseProps = HTMLAttributes<HTMLDivElement> & {\n  options?: Options;\n  children: Options['children'];\n};\n\nconst components: Options['components'] = {\n  a: ({ href, children }) => (\n    <a\n      href={href}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n      className=\"font-medium underline underline-offset-4\"\n    >\n      {children}\n    </a>\n  ),\n  code: ({ node, className, children }) => {\n    let language = 'javascript';\n\n    if (typeof node?.properties?.className === 'string') {\n      language = node.properties.className.replace('language-', '');\n    }\n\n    const data: CodeBlockProps['data'] = [\n      {\n        language,\n        filename: 'index.js',\n        code: children as string,\n      },\n    ];\n\n    return (\n      <CodeBlock\n        className={cn('my-4', className)}\n        data={data}\n        defaultValue={data[0].language}\n      >\n        <CodeBlockHeader>\n          <CodeBlockFiles>\n            {(item) => (\n              <CodeBlockFilename key={item.language} value={item.language}>\n                {item.filename}\n              </CodeBlockFilename>\n            )}\n          </CodeBlockFiles>\n          <CodeBlockSelect>\n            <CodeBlockSelectTrigger>\n              <CodeBlockSelectValue />\n            </CodeBlockSelectTrigger>\n            <CodeBlockSelectContent>\n              {(item) => (\n                <CodeBlockSelectItem key={item.language} value={item.language}>\n                  {item.language}\n                </CodeBlockSelectItem>\n              )}\n            </CodeBlockSelectContent>\n          </CodeBlockSelect>\n          <CodeBlockCopyButton\n            onCopy={() => console.log('Copied code to clipboard')}\n            onError={() => console.error('Failed to copy code to clipboard')}\n          />\n        </CodeBlockHeader>\n        <CodeBlockBody>\n          {(item) => (\n            <CodeBlockItem key={item.language} value={item.language}>\n              <CodeBlockContent language={item.language as BundledLanguage}>\n                {item.code}\n              </CodeBlockContent>\n            </CodeBlockItem>\n          )}\n        </CodeBlockBody>\n      </CodeBlock>\n    );\n  },\n};\n\nexport const AIResponse = ({\n  className,\n  options,\n  children,\n  ...props\n}: AIResponseProps) => (\n  <div className={cn('size-full', className)} {...props}>\n    <ReactMarkdown\n      remarkPlugins={[remarkGfm]}\n      components={components}\n      {...options}\n    >\n      {children}\n    </ReactMarkdown>\n  </div>\n);\n",
      "target": "components/ui/kibo-ui/ai/response.tsx"
    },
    {
      "type": "registry:ui",
      "path": "input.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport { Children, useCallback, useEffect, useRef } from 'react';\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  KeyboardEventHandler,\n} from 'react';\n\ntype UseAutoResizeTextareaProps = {\n  minHeight: number;\n  maxHeight?: number;\n};\n\nconst useAutoResizeTextarea = ({\n  minHeight,\n  maxHeight,\n}: UseAutoResizeTextareaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustHeight = useCallback(\n    (reset?: boolean) => {\n      const textarea = textareaRef.current;\n      if (!textarea) {\n        return;\n      }\n\n      if (reset) {\n        textarea.style.height = `${minHeight}px`;\n        return;\n      }\n\n      // Temporarily shrink to get the right scrollHeight\n      textarea.style.height = `${minHeight}px`;\n\n      // Calculate new height\n      const newHeight = Math.max(\n        minHeight,\n        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\n      );\n\n      textarea.style.height = `${newHeight}px`;\n    },\n    [minHeight, maxHeight]\n  );\n\n  useEffect(() => {\n    // Set initial height\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = `${minHeight}px`;\n    }\n  }, [minHeight]);\n\n  // Adjust height on window resize\n  useEffect(() => {\n    const handleResize = () => adjustHeight();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [adjustHeight]);\n\n  return { textareaRef, adjustHeight };\n};\n\nexport type AIInputProps = HTMLAttributes<HTMLFormElement>;\n\nexport const AIInput = ({ className, ...props }: AIInputProps) => (\n  <form\n    className={cn(\n      'w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputTextareaProps = ComponentProps<typeof Textarea> & {\n  minHeight?: number;\n  maxHeight?: number;\n};\n\nexport const AIInputTextarea = ({\n  onChange,\n  className,\n  placeholder = 'What would you like to know?',\n  minHeight = 48,\n  maxHeight = 164,\n  ...props\n}: AIInputTextareaProps) => {\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n  });\n\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      const form = e.currentTarget.form;\n      if (form) {\n        form.requestSubmit();\n      }\n    }\n  };\n\n  return (\n    <Textarea\n      name=\"message\"\n      placeholder={placeholder}\n      ref={textareaRef}\n      className={cn(\n        'w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0',\n        className\n      )}\n      onChange={(e) => {\n        adjustHeight();\n        onChange?.(e);\n      }}\n      onKeyDown={handleKeyDown}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputToolbarProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputToolbar = ({\n  className,\n  ...props\n}: AIInputToolbarProps) => (\n  <div\n    className={cn('flex items-center justify-between p-1', className)}\n    {...props}\n  />\n);\n\nexport type AIInputToolsProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputTools = ({ className, ...props }: AIInputToolsProps) => (\n  <div className={cn('flex items-center gap-1', className)} {...props} />\n);\n\nexport type AIInputButtonProps = ComponentProps<typeof Button>;\n\nexport const AIInputButton = ({\n  variant = 'ghost',\n  className,\n  size,\n  ...props\n}: AIInputButtonProps) => {\n  const newSize =\n    (size ?? Children.count(props.children) > 1) ? 'default' : 'icon';\n\n  return (\n    <Button\n      type=\"button\"\n      variant={variant}\n      size={newSize}\n      className={cn(\n        'shrink-0 gap-1.5 text-muted-foreground',\n        newSize === 'default' && 'px-3',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputSubmitProps = ComponentProps<typeof Button>;\n\nexport const AIInputSubmit = ({\n  className,\n  variant = 'ghost',\n  size = 'icon',\n  ...props\n}: AIInputSubmitProps) => (\n  <Button\n    type=\"submit\"\n    variant={variant}\n    size={size}\n    className={cn('gap-1.5 text-muted-foreground', className)}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectProps = ComponentProps<typeof Select>;\n\nexport const AIInputModelSelect = (props: AIInputModelSelectProps) => (\n  <Select {...props} />\n);\n\nexport type AIInputModelSelectTriggerProps = ComponentProps<\n  typeof SelectTrigger\n>;\n\nexport const AIInputModelSelectTrigger = ({\n  className,\n  ...props\n}: AIInputModelSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors',\n      'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectContentProps = ComponentProps<\n  typeof SelectContent\n>;\n\nexport const AIInputModelSelectContent = ({\n  className,\n  ...props\n}: AIInputModelSelectContentProps) => (\n  <SelectContent className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const AIInputModelSelectItem = ({\n  className,\n  ...props\n}: AIInputModelSelectItemProps) => (\n  <SelectItem className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const AIInputModelSelectValue = ({\n  className,\n  ...props\n}: AIInputModelSelectValueProps) => (\n  <SelectValue className={cn(className)} {...props} />\n);\n",
      "target": "components/ui/kibo-ui/ai/input.tsx"
    }
  ]
}