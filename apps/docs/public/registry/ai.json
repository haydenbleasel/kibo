{
  "$schema": "https://ui.shadcn.com/schema/registry.json",
  "homepage": "https://www.kibo-ui.com/ai",
  "name": "ai",
  "type": "registry:ui",
  "author": "Hayden Bleasel <hello@haydenbleasel.com>",
  "registryDependencies": [
    "avatar",
    "button",
    "select",
    "textarea"
  ],
  "dependencies": [
    "lucide-react"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:ui",
      "path": "message.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport type { ComponentProps, HTMLAttributes } from 'react';\n\nexport type MessagesProps = HTMLAttributes<HTMLDivElement>;\n\nexport const Messages = ({ className, ...props }: MessagesProps) => (\n  <div className={cn('flex w-full flex-col gap-8', className)} {...props} />\n);\n\nexport type MessageGroupProps = HTMLAttributes<HTMLDivElement> & {\n  owner?: boolean;\n};\n\nexport const MessageGroup = ({\n  className,\n  owner,\n  ...props\n}: MessageGroupProps) => (\n  <div\n    className={cn(\n      'group flex items-end gap-2',\n      owner ? '[&>div]:items-end' : '[&>div]:items-start'\n    )}\n    {...props}\n  />\n);\n\nexport type MessageProps = HTMLAttributes<HTMLDivElement>;\n\nexport const Message = ({ className, ...props }: MessageProps) => (\n  <div\n    className={cn(\n      'flex flex-col gap-1 rounded-md border bg-background p-2 text-sm shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type MessageAvatarProps = ComponentProps<typeof Avatar> & {\n  fallback?: string;\n  src?: string;\n};\n\nexport const MessageAvatar = ({\n  className,\n  src,\n  fallback,\n  ...props\n}: MessageAvatarProps) => (\n  <Avatar className={cn('size-8 shrink-0', className)} {...props}>\n    <AvatarImage src={src} />\n    <AvatarFallback>{fallback}</AvatarFallback>\n  </Avatar>\n);\n\nexport type MessageListProps = HTMLAttributes<HTMLDivElement>;\n\nexport const MessageList = ({ className, ...props }: MessageListProps) => (\n  <div className={cn('flex flex-1 flex-col gap-2', className)} {...props} />\n);\n",
      "target": "components/ui/kibo-ui/ai/message.tsx"
    },
    {
      "type": "registry:ui",
      "path": "input.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport { Children, useCallback, useEffect, useRef } from 'react';\nimport type {\n  ComponentProps,\n  HTMLAttributes,\n  KeyboardEventHandler,\n} from 'react';\n\ntype UseAutoResizeTextareaProps = {\n  minHeight: number;\n  maxHeight?: number;\n};\n\nconst useAutoResizeTextarea = ({\n  minHeight,\n  maxHeight,\n}: UseAutoResizeTextareaProps) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustHeight = useCallback(\n    (reset?: boolean) => {\n      const textarea = textareaRef.current;\n      if (!textarea) {\n        return;\n      }\n\n      if (reset) {\n        textarea.style.height = `${minHeight}px`;\n        return;\n      }\n\n      // Temporarily shrink to get the right scrollHeight\n      textarea.style.height = `${minHeight}px`;\n\n      // Calculate new height\n      const newHeight = Math.max(\n        minHeight,\n        Math.min(textarea.scrollHeight, maxHeight ?? Number.POSITIVE_INFINITY)\n      );\n\n      textarea.style.height = `${newHeight}px`;\n    },\n    [minHeight, maxHeight]\n  );\n\n  useEffect(() => {\n    // Set initial height\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = `${minHeight}px`;\n    }\n  }, [minHeight]);\n\n  // Adjust height on window resize\n  useEffect(() => {\n    const handleResize = () => adjustHeight();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [adjustHeight]);\n\n  return { textareaRef, adjustHeight };\n};\n\nexport type AIInputProps = HTMLAttributes<HTMLFormElement>;\n\nexport const AIInput = ({ className, ...props }: AIInputProps) => (\n  <form\n    className={cn(\n      'w-full divide-y overflow-hidden rounded-xl border bg-background shadow-sm',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputTextareaProps = ComponentProps<typeof Textarea> & {\n  minHeight?: number;\n  maxHeight?: number;\n};\n\nexport const AIInputTextarea = ({\n  onChange,\n  className,\n  placeholder = 'What would you like to know?',\n  minHeight = 48,\n  maxHeight = 164,\n  ...props\n}: AIInputTextareaProps) => {\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\n    minHeight,\n    maxHeight,\n  });\n\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\n    if (e.key === 'Enter' && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      const form = e.currentTarget.form;\n      if (form) {\n        form.requestSubmit();\n      }\n    }\n  };\n\n  return (\n    <Textarea\n      name=\"message\"\n      placeholder={placeholder}\n      ref={textareaRef}\n      className={cn(\n        'w-full resize-none rounded-none border-none p-3 shadow-none outline-none ring-0',\n        className\n      )}\n      onChange={(e) => {\n        adjustHeight();\n        onChange?.(e);\n      }}\n      onKeyDown={handleKeyDown}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputToolbarProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputToolbar = ({\n  className,\n  ...props\n}: AIInputToolbarProps) => (\n  <div\n    className={cn('flex items-center justify-between p-1', className)}\n    {...props}\n  />\n);\n\nexport type AIInputToolsProps = HTMLAttributes<HTMLDivElement>;\n\nexport const AIInputTools = ({ className, ...props }: AIInputToolsProps) => (\n  <div className={cn('flex items-center gap-1', className)} {...props} />\n);\n\nexport type AIInputButtonProps = ComponentProps<typeof Button>;\n\nexport const AIInputButton = ({\n  variant = 'ghost',\n  className,\n  size,\n  ...props\n}: AIInputButtonProps) => {\n  const newSize =\n    (size ?? Children.count(props.children) > 1) ? 'default' : 'icon';\n\n  return (\n    <Button\n      type=\"button\"\n      variant={variant}\n      size={newSize}\n      className={cn(\n        'shrink-0 gap-1.5 text-muted-foreground',\n        newSize === 'default' && 'px-3',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\nexport type AIInputSubmitProps = ComponentProps<typeof Button>;\n\nexport const AIInputSubmit = ({\n  className,\n  variant = 'ghost',\n  size = 'icon',\n  ...props\n}: AIInputSubmitProps) => (\n  <Button\n    type=\"submit\"\n    variant={variant}\n    size={size}\n    className={cn('gap-1.5 text-muted-foreground', className)}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectProps = ComponentProps<typeof Select>;\n\nexport const AIInputModelSelect = (props: AIInputModelSelectProps) => (\n  <Select {...props} />\n);\n\nexport type AIInputModelSelectTriggerProps = ComponentProps<\n  typeof SelectTrigger\n>;\n\nexport const AIInputModelSelectTrigger = ({\n  className,\n  ...props\n}: AIInputModelSelectTriggerProps) => (\n  <SelectTrigger\n    className={cn(\n      'border-none bg-transparent font-medium text-muted-foreground shadow-none transition-colors',\n      'hover:bg-accent hover:text-foreground [&[aria-expanded=\"true\"]]:bg-accent [&[aria-expanded=\"true\"]]:text-foreground',\n      className\n    )}\n    {...props}\n  />\n);\n\nexport type AIInputModelSelectContentProps = ComponentProps<\n  typeof SelectContent\n>;\n\nexport const AIInputModelSelectContent = ({\n  className,\n  ...props\n}: AIInputModelSelectContentProps) => (\n  <SelectContent className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectItemProps = ComponentProps<typeof SelectItem>;\n\nexport const AIInputModelSelectItem = ({\n  className,\n  ...props\n}: AIInputModelSelectItemProps) => (\n  <SelectItem className={cn(className)} {...props} />\n);\n\nexport type AIInputModelSelectValueProps = ComponentProps<typeof SelectValue>;\n\nexport const AIInputModelSelectValue = ({\n  className,\n  ...props\n}: AIInputModelSelectValueProps) => (\n  <SelectValue className={cn(className)} {...props} />\n);\n",
      "target": "components/ui/kibo-ui/ai/input.tsx"
    }
  ]
}