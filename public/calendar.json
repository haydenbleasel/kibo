{
  "name": "calendar",
  "type": "registry:component",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "date-fns",
    "lucide-react",
    "zustand"
  ],
  "devDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "path": "roadmap-ui/calendar.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { format, getDay, getDaysInMonth, isSameDay } from 'date-fns';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport type { ReactNode } from 'react';\nimport { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\n\nexport type CalendarState = {\n  month: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\n  year: number;\n  setMonth: (month: CalendarState['month']) => void;\n  setYear: (year: CalendarState['year']) => void;\n};\n\nexport const useCalendar = create<CalendarState>()(\n  devtools((set) => ({\n    month: new Date().getMonth() as CalendarState['month'],\n    year: new Date().getFullYear(),\n    setMonth: (month: CalendarState['month']) => set(() => ({ month })),\n    setYear: (year: CalendarState['year']) => set(() => ({ year })),\n  }))\n);\n\ntype Status = {\n  id: string;\n  name: string;\n  color: string;\n};\n\ntype Feature = {\n  id: string;\n  name: string;\n  startAt: Date;\n  endAt: Date;\n  status: Status;\n};\n\nexport type OutOfBoundsDayProps = {\n  day: number;\n};\n\nexport const OutOfBoundsDay = ({ day }: OutOfBoundsDayProps) => (\n  <div className=\"relative h-full w-full bg-secondary p-1 text-muted-foreground text-xs\">\n    {day}\n  </div>\n);\n\nexport const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nexport type CalendarBodyProps = {\n  features: Feature[];\n  children: (props: {\n    feature: Feature;\n  }) => ReactNode;\n};\n\nexport const CalendarBody = ({ features, children }: CalendarBodyProps) => {\n  const { month, year } = useCalendar();\n  const daysInMonth = getDaysInMonth(new Date(year, month, 1));\n  const firstDay = getDay(new Date(year, month, 1));\n  const days: ReactNode[] = [];\n\n  const prevMonth = month === 0 ? 11 : month - 1;\n  const prevMonthYear = month === 0 ? year - 1 : year;\n  const prevMonthDays = getDaysInMonth(new Date(prevMonthYear, prevMonth, 1));\n  const prevMonthDaysArray = Array.from(\n    { length: prevMonthDays },\n    (_, i) => i + 1\n  );\n\n  for (let i = 0; i < firstDay; i++) {\n    const day = prevMonthDaysArray[prevMonthDays - firstDay + i];\n\n    if (day) {\n      days.push(<OutOfBoundsDay key={`prev-${i}`} day={day} />);\n    }\n  }\n\n  for (let day = 1; day <= daysInMonth; day++) {\n    const featuresForDay = features.filter((feature) => {\n      return isSameDay(new Date(feature.endAt), new Date(year, month, day));\n    });\n\n    days.push(\n      <div\n        key={day}\n        className=\"relative h-full w-full p-1 text-muted-foreground text-xs flex flex-col gap-1\"\n      >\n        {day}\n        <div>\n          {featuresForDay.slice(0, 3).map((feature) => children({ feature }))}\n        </div>\n        {featuresForDay.length > 3 && (\n          <span className=\"text-xs text-muted-foreground block\">\n            +{featuresForDay.length - 3} more\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const nextMonth = month === 11 ? 0 : month + 1;\n  const nextMonthYear = month === 11 ? year + 1 : year;\n  const nextMonthDays = getDaysInMonth(new Date(nextMonthYear, nextMonth, 1));\n  const nextMonthDaysArray = Array.from(\n    { length: nextMonthDays },\n    (_, i) => i + 1\n  );\n\n  const remainingDays = 7 - ((firstDay + daysInMonth) % 7);\n  if (remainingDays < 7) {\n    for (let i = 0; i < remainingDays; i++) {\n      const day = nextMonthDaysArray[i];\n\n      if (day) {\n        days.push(<OutOfBoundsDay key={`next-${i}`} day={day} />);\n      }\n    }\n  }\n\n  return (\n    <div className=\"grid flex-grow grid-cols-7\">\n      {days.map((day, index) => (\n        <div\n          key={index}\n          className={cn(\n            'relative aspect-square overflow-hidden border-t border-r',\n            index % 7 === 6 && 'border-r-0'\n          )}\n        >\n          {day}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport type CalendarDateLabelProps = {\n  className?: string;\n};\n\nexport const CalendarDateLabel = ({ className }: CalendarDateLabelProps) => {\n  const { month, year } = useCalendar();\n  const monthName = format(new Date(year, month), 'MMMM');\n\n  return (\n    <p\n      className={cn('font-medium text-sm', className)}\n    >{`${monthName}, ${year}`}</p>\n  );\n};\n\nexport type CalendarDatePaginationProps = {\n  className?: string;\n};\n\nexport const CalendarDatePagination = ({\n  className,\n}: CalendarDatePaginationProps) => {\n  const { month, year, setMonth, setYear } = useCalendar();\n\n  const handlePreviousMonth = () => {\n    if (month === 0) {\n      setMonth(11);\n      setYear(year - 1);\n    } else {\n      setMonth((month - 1) as CalendarState['month']);\n    }\n  };\n\n  const handleNextMonth = () => {\n    if (month === 11) {\n      setMonth(0);\n      setYear(year + 1);\n    } else {\n      setMonth((month + 1) as CalendarState['month']);\n    }\n  };\n\n  return (\n    <div className={cn('flex items-center gap-2', className)}>\n      <Button onClick={() => handlePreviousMonth()} variant=\"ghost\" size=\"icon\">\n        <ChevronLeftIcon size={16} />\n      </Button>\n      <Button onClick={() => handleNextMonth()} variant=\"ghost\" size=\"icon\">\n        <ChevronRightIcon size={16} />\n      </Button>\n    </div>\n  );\n};\n\nexport type CalendarDateProps = {\n  children: ReactNode;\n};\n\nexport const CalendarDate = ({ children }: CalendarDateProps) => (\n  <div className=\"flex items-center justify-between p-3\">{children}</div>\n);\n\nexport type CalendarHeaderProps = {\n  className?: string;\n};\n\nexport const CalendarHeader = ({ className }: CalendarHeaderProps) => (\n  <div className={cn('grid flex-grow grid-cols-7', className)}>\n    {daysOfWeek.map((day) => (\n      <div key={day} className=\"p-3 text-right text-muted-foreground text-xs\">\n        {day}\n      </div>\n    ))}\n  </div>\n);\n\nexport type CalendarItemProps = {\n  feature: Feature;\n  className?: string;\n};\n\nexport const CalendarItem = ({ feature, className }: CalendarItemProps) => (\n  <div className={cn('flex items-center gap-2', className)} key={feature.id}>\n    <div\n      className=\"h-2 w-2 shrink-0 rounded-full\"\n      style={{\n        backgroundColor: feature.status.color,\n      }}\n    />\n    <span className=\"truncate\">{feature.name}</span>\n  </div>\n);\n\nexport type CalendarProviderProps = {\n  children: ReactNode;\n  className?: string;\n};\n\nexport const CalendarProvider = ({\n  children,\n  className,\n}: CalendarProviderProps) => (\n  <div className={cn('relative flex flex-col', className)}>{children}</div>\n);\n",
      "target": "components/roadmap-ui/calendar.tsx"
    }
  ]
}